input createFrameworkInput {
  data: FrameworkInput
}

type createFrameworkPayload {
  framework: Framework
}

input createLanguageInput {
  data: LanguageInput
}

type createLanguagePayload {
  language: Language
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteFrameworkInput {
  where: InputID
}

type deleteFrameworkPayload {
  framework: Framework
}

input deleteLanguageInput {
  where: InputID
}

type deleteLanguagePayload {
  language: Language
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editFrameworkInput {
  Name: String
  Description: String
  Active: Boolean
}

input editLanguageInput {
  name: String
  description: String
  Active: Boolean
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

"""Software Development Frameworks """
type Framework {
  Name: String!
  Description: String
  Active: Boolean!
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input FrameworkInput {
  Name: String!
  Description: String
  Active: Boolean!
}

input InputID {
  id: ID!
}

scalar JSON

"""A list of programming languages """
type Language {
  name: String
  description: String
  Active: Boolean
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input LanguageInput {
  name: String
  description: String
  Active: Boolean
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Framework | createFrameworkPayload | updateFrameworkPayload | deleteFrameworkPayload | Language | createLanguagePayload | updateLanguagePayload | deleteLanguagePayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createFramework(input: createFrameworkInput): createFrameworkPayload
  updateFramework(input: updateFrameworkInput): updateFrameworkPayload
  deleteFramework(input: deleteFrameworkInput): deleteFrameworkPayload
  createLanguage(input: createLanguageInput): createLanguagePayload
  updateLanguage(input: updateLanguageInput): updateLanguagePayload
  deleteLanguage(input: deleteLanguageInput): deleteLanguagePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
}

type Query {
  framework(id: ID!): Framework
  frameworks(sort: String, limit: Int, start: Int, where: JSON): [Framework]
  language(id: ID!): Language
  languages(sort: String, limit: Int, start: Int, where: JSON): [Language]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateFrameworkInput {
  where: InputID
  data: editFrameworkInput
}

type updateFrameworkPayload {
  framework: Framework
}

input updateLanguageInput {
  where: InputID
  data: editLanguageInput
}

type updateLanguagePayload {
  language: Language
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  id: ID!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}
